/* Author: Phillip Pham
 * Date: 02/20/22
 * Description: This is the startup file for the web API where we will configure our service and inject dependencies.
 */

using LeaderboardAPI.Repositories;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;
using System;
using System.IO;
using System.Reflection;

namespace LeaderboardAPI
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            // Dependency injection, we are also reading the 'DefaultPageSize' key, value pair in the configuration and sending it to the controller.
            services.AddSingleton<ILeaderboardService, LeaderboardService>();
            services.AddSingleton(Configuration.GetValue<string>("DefaultPageSize"));
            services.AddControllers();

            // Add swagger doc to the project so its easy to test
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo 
                {
                    Title = "Leaderboard API", 
                    Version = "v1",
                    Description = "An ASP.NET Core 5.0 Web API for receiving leaderboard data.",
                    Contact = new OpenApiContact
                    { 
                        Name = "Phillip Pham",
                        Url = new Uri("https://github.com/ppthreefive"),
                        Email = "pgpham@asu.edu"       
                    }
                });

                // Swagger autogenerated documentation
                var xmlFilename = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                c.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, xmlFilename));
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            app.UseSwagger();
            app.UseSwaggerUI(c => 
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "Leaderboard API");
            });

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
